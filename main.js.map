{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./libs/interfaces/src/index.ts","webpack:///external \"tslib\"","webpack:///./libs/errors/src/index.ts","webpack:///./libs/utils/src/index.ts","webpack:///external \"near-api-js\"","webpack:///external \"typedjson\"","webpack:///external \"tsoa\"","webpack:///./libs/crypto/src/index.ts","webpack:///external \"buffer\"","webpack:///external \"bn.js\"","webpack:///./apps/api/src/app/config/constants.ts","webpack:///./libs/near/src/lib/contract.ts","webpack:///./libs/global-contract/src/index.ts","webpack:///external \"tweetnacl\"","webpack:///./libs/crypto/src/lib/hash.ts","webpack:///./libs/near/src/lib/convert.ts","webpack:///./libs/torus/src/common/constants.ts","webpack:///./libs/near/src/lib/rpc.ts","webpack:///./libs/utils/src/lib/bytes.ts","webpack:///./libs/near/src/lib/utils.ts","webpack:///external \"axios\"","webpack:///./libs/global-state/src/index.ts","webpack:///./apps/api/src/environments/environment.test.ts","webpack:///./libs/crypto/src/lib/keys.ts","webpack:///./libs/crypto/src/lib/sign.ts","webpack:///./libs/utils/src/lib/types.ts","webpack:///./libs/near/src/lib/constants.ts","webpack:///external \"elliptic\"","webpack:///./libs/near/src/index.ts","webpack:///./apps/api/src/app/controllers/NearController.ts","webpack:///./apps/api/src/app/service/near.ts","webpack:///external \"body-parser\"","webpack:///external \"@tsoa/runtime\"","webpack:///external \"bs58\"","webpack:///external \"near-api-js/lib/account_creator\"","webpack:///external \"near-api-js/lib/key_stores\"","webpack:///external \"@toruslabs/torus.js\"","webpack:///./libs/interfaces/src/lib/configs.ts","webpack:///./libs/interfaces/src/lib/chains.ts","webpack:///./libs/interfaces/src/lib/chain-info.ts","webpack:///./libs/interfaces/src/lib/keysource.ts","webpack:///./libs/interfaces/src/lib/crypto.ts","webpack:///./libs/interfaces/src/lib/tx.ts","webpack:///./libs/crypto/src/lib/crypto.ts","webpack:///./libs/crypto/src/lib/index.ts","webpack:///./libs/errors/src/lib/errors.ts","webpack:///./libs/utils/src/lib/utils.ts","webpack:///./libs/utils/src/lib/chains.ts","webpack:///./libs/utils/src/lib/conversions.ts","webpack:///./libs/utils/src/lib/discord.ts","webpack:///./libs/utils/src/lib/user-verifier.ts","webpack:///./libs/utils/src/lib/serialize.ts","webpack:///./libs/crypto/src/lib/utils.ts","webpack:///./libs/near/src/lib/near.ts","webpack:///./libs/global-contract/src/lib/global-contract.ts","webpack:///./libs/global-contract/src/lib/constants.ts","webpack:///./libs/chain-info/src/lib/chain-info.ts","webpack:///./libs/global-state/src/lib/singletons.ts","webpack:///./libs/torus/src/common/torus.ts","webpack:///external \"express\"","webpack:///./apps/api/build/routes.ts","webpack:///./apps/api/src/app/controllers/DiscordController.ts","webpack:///./apps/api/src/app/service/discord.ts","webpack:///external \"form-data\"","webpack:///external \"js-sha3\"","webpack:///external \"js-sha256\"","webpack:///./libs/near/src/lib/tx.ts","webpack:///./libs/near/src/lib/accounts.ts","webpack:///external \"near-api-js/lib/utils\"","webpack:///./libs/chain-info/src/index.ts","webpack:///external \"thunky/promise\"","webpack:///external \"dotenv\"","webpack:///./libs/torus/src/common/index.ts","webpack:///external \"@toruslabs/fetch-node-details\"","webpack:///external \"node-fetch\"","webpack:///external \"cors\"","webpack:///./apps/api/src/main.ts","webpack:///external \"reflect-metadata\""],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 79);\n","export * from './lib/platforms';\nexport * from './lib/configs';\nexport * from './lib/chains';\nexport * from './lib/chain-info';\nexport * from './lib/keysource';\nexport * from './lib/crypto';\nexport * from './lib/frontend';\nexport * from './lib/tx';\n","module.exports = require(\"tslib\");","export * from './lib/errors';\n","export * from './lib/utils';\n","module.exports = require(\"near-api-js\");","module.exports = require(\"typedjson\");","module.exports = require(\"tsoa\");","export * from './lib/crypto';\n","module.exports = require(\"buffer\");","module.exports = require(\"bn.js\");","import { ed25519, ed25519Marker, Encoding, Env } from '@baf-wallet/interfaces';\nimport { keyPairFromSk, skFromString } from '@baf-wallet/crypto';\nimport {\n  NearInitParams,\n  getNearNetworkID,\n  getNearSupportedContractTokens,\n} from '@baf-wallet/near';\nimport { environment, initDotEnv } from '../../environments/environment';\n\ninitDotEnv();\n\nexport const constants = {\n  env: environment.env,\n  chainParams: {\n    near: {\n      keyPair: keyPairFromSk<ed25519>(\n        skFromString(process.env.NEAR_SK, ed25519Marker, Encoding.BS58)\n      ),\n      networkID: getNearNetworkID(environment.env),\n      masterAccountID: process.env.NEAR_MASTER_ACCOUNT_ID,\n    } as NearInitParams,\n  },\n  discord: {\n    clientId: process.env.DISCORD_CLIENT_ID,\n    clientSecret: process.env.DISCORD_CLIENT_SECRET,\n  },\n  torus: {\n    verifierName: 'discord',\n    network: environment.env === Env.PROD ? 'mainnet' : 'testnet',\n    proxyAddress: '0x4023d2a0D330bF11426B12C6144Cfb96B7fa6183',\n  },\n};\n","import { ContractInterface } from '@baf-wallet/interfaces';\nimport BN from 'bn.js';\nimport { Account, Contract as NearNativeContract } from 'near-api-js';\nimport { NearAccountID } from './accounts';\n\nimport { NearState } from './near';\n\ninterface NearNFTToken {\n  id: string;\n  owner_id: string;\n}\n\nexport interface TokenMetadata {\n  id: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n  icon: string;\n}\n\n/**\n * The following are definitions for standard Near Contracts\n */\nexport interface NEP141Contract extends NearContract {\n  // TODO: fill in, see https://github.com/bafnetwork/baf-wallet-v2/issues/69\n  ft_balance_of: (args: { account_id: NearAccountID }) => Promise<string>;\n  ft_total_supply: () => Promise<string>;\n  storage_balance_of: (args: { account_id: NearAccountID }) => Promise<string>;\n  // 1 Yocto Near is the standard accepted attached deposit for ft_transfer\n  ft_transfer: (\n    args: {\n      receiver_id: NearAccountID;\n      amount: string;\n      memo?: string;\n    },\n    gas: string,\n    attachedDeposit: string\n  ) => Promise<void>;\n  ft_metadata: () => Promise<TokenMetadata>;\n}\n\nexport interface NEP171Contract extends NearContract {\n  nft_transfer: (\n    args: {\n      receiver_id: NearAccountID;\n      token_id: string;\n      approval_id: BN | null;\n      memo?: string;\n    },\n    gas: string,\n    attachedDeposit: string\n  ) => Promise<void>;\n  nft_transfer_call: (\n    args: {\n      receiver_id: NearAccountID;\n      token_id: string;\n      approval_id: BN | null;\n      memo?: string;\n      msg: string;\n    },\n    gas: string,\n    attachedDeposit: string\n  ) => Promise<void>;\n  nft_token: (args: { token_id: string }) => Promise<NearNFTToken>;\n}\n\ntype contractViewMethod = (args: any) => Promise<any>;\ntype contractChangeMethod = (\n  args: any,\n  gas?: string,\n  attachedDeposit?: string\n) => Promise<any>;\n\n/**\n * End definitions for standard Near Contracts\n */\nexport type NearContract = {\n  [fn_name: string]: contractViewMethod | contractChangeMethod;\n};\n\nexport interface NearInitContractParams {\n  callerAccount?: Account;\n  viewMethods: string[];\n  changeMethods: string[];\n}\n\nexport const initContract = (\n  nearMasterAccount: Account,\n  contractAccountID\n) => async <Contract>(params: NearInitContractParams) => {\n  const contract = new NearNativeContract(\n    params.callerAccount ?? nearMasterAccount,\n    contractAccountID,\n    {\n      viewMethods: params.viewMethods,\n      changeMethods: params.changeMethods,\n    }\n  );\n  return (contract as unknown) as Contract;\n};\n\nexport function getContract<\n  Contract,\n  ContractInitParams extends NearInitContractParams\n>(\n  nearState: NearState,\n  contractAccountID: string\n): ContractInterface<Contract, ContractInitParams> {\n  return {\n    init: initContract(nearState.nearMasterAccount, contractAccountID),\n  };\n}\n","export * from './lib/global-contract';\nexport * from './lib/constants';\n","module.exports = require(\"tweetnacl\");","import * as sha3 from 'js-sha3';\nimport { sha256 as js_sha256 } from 'js-sha256';\n\nexport function keccak256(msg: Buffer): Buffer {\n  return Buffer.from(sha3.keccak256(msg), 'hex');\n}\n\nexport function sha256(msg: Buffer): Buffer {\n  return Buffer.from(js_sha256(msg), 'hex');\n}\n\n// add more wrappers here as needed\n","import {\n  Converter,\n  KeyPair,\n  PublicKey,\n  Encoding,\n} from '@baf-wallet/interfaces';\nimport { KeyPair as NearKeyPair, utils as NearUtils } from 'near-api-js';\nimport { bufferConverter, encodeBytes, formatBytes } from '@baf-wallet/utils';\nimport { Buffer } from 'buffer';\nimport { BafError } from '@baf-wallet/errors';\n\nexport const nearConverter: Converter<\n  NearUtils.PublicKey,\n  Buffer,\n  NearKeyPair\n> = {\n  ...bufferConverter,\n\n  pkToUnified<Curve>(\n    pk: NearUtils.PublicKey,\n    curveMarker: Curve\n  ): PublicKey<Curve> {\n    if (curveMarker.toString() !== 'ed25519') {\n      throw BafError.UnsupportedKeyCurve('ed25519');\n    }\n    const data = Buffer.from(pk.data);\n    return {\n      curve: curveMarker,\n      data: data,\n      format: (fmt: Encoding) => formatBytes(data, fmt),\n    };\n  },\n\n  pkFromUnified: <Curve>(unifiedPk: PublicKey<Curve>): NearUtils.PublicKey =>\n    NearUtils.PublicKey.fromString(unifiedPk.format(Encoding.BS58) as string),\n\n  keyPairToUnified<Curve>(\n    keyPair: NearKeyPair,\n    curveMarker: Curve\n  ): KeyPair<Curve> {\n    const skFmt = keyPair.toString();\n    if (!skFmt.startsWith(curveMarker.toString())) {\n      throw BafError.UnsupportedKeyCurve('ed25519');\n    }\n\n    const skStr = skFmt.split(':')[1];\n    const skData = encodeBytes(skStr, Encoding.BS58);\n    const pkData = Buffer.from(keyPair.getPublicKey().data);\n\n    return {\n      curve: curveMarker,\n      pk: {\n        curve: curveMarker,\n        data: pkData,\n        format: (fmt: Encoding) => formatBytes(pkData, fmt),\n      },\n      sk: {\n        curve: curveMarker,\n        data: skData,\n        format: (fmt: Encoding) => formatBytes(skData, fmt),\n      },\n    };\n  },\n\n  keyPairFromUnified<Curve>(unifiedKeyPair: KeyPair<Curve>): NearKeyPair {\n    const prefix = unifiedKeyPair.curve.toString();\n    const skStr = unifiedKeyPair.sk.format(Encoding.BS58);\n    return NearKeyPair.fromString(`${prefix}:${skStr}`);\n  },\n};\n","import { LOGIN_TYPE } from '@toruslabs/torus-direct-web-sdk';\n\ntype VerifierInfo = {\n  [login_type in LOGIN_TYPE]?: {\n    verifier: string;\n    clientId: string;\n  };\n};\nexport const torusConstants = {\n  network: 'ropsten',\n  proxyAddress: '0x4023d2a0D330bF11426B12C6144Cfb96B7fa6183',\n  verifierInfo: {\n    discord: {\n      verifier: 'baf wallet-discord-testnet',\n      clientId: '821890148198776874',\n    },\n  } as VerifierInfo,\n};\n\nexport type TORUS_LOGIN_TYPE = LOGIN_TYPE;\n","import { RpcInterface } from '@baf-wallet/interfaces';\nimport { transactions } from 'near-api-js';\nimport { NearNetworkID, stringToNetworkID } from './utils';\nimport { NearState } from './near';\nimport { network } from 'near-api-js/lib/utils';\n\nexport type NearRpcInterface = RpcInterface<\n  transactions.Transaction,\n  transactions.SignedTransaction,\n  NearSendOpts,\n  NearSendResult\n>;\n\n// TODO: go spelunking in near's jsonRpcProvider and see what options it takes\n// and see what kind of stuff it actually returns so we can do better than 'any'\n// eslint-disable-next-line\nexport interface NearSendOpts {}\n\nexport type NearSendResult = any;\n\n// * add more RPC methods as they are needed\n\nexport function nearRpc(_innerSdk: NearState): NearRpcInterface {\n  return {\n    endpoint: getRPCUrl,\n  };\n}\n\nexport function getWalletUrl(network?: string): string {\n  const networkID: NearNetworkID = stringToNetworkID(network ?? 'mainnet');\n  return `https://wallet.${networkID}.near.org`;\n}\n\nexport function getRPCUrl(network?: string): string {\n  const networkID: NearNetworkID = stringToNetworkID(network ?? 'mainnet');\n  return `https://rpc.${networkID}.near.org`;\n}\n\nexport const getHelperUrl = (networkID: string) =>\n  `https://helper.${networkID}.near.org`;\n\nexport const getExplorerUrl = (networkID: string) =>\n  `https://explorer.${networkID}.near.org`;\n","import { Encoding, PublicKey, SecretKey } from '@baf-wallet/interfaces';\nimport { BafError } from '@baf-wallet/errors';\nimport * as bs58 from 'bs58';\n\nexport function formatBytes(\n  buf: Buffer,\n  fmt = Encoding.HEX\n): string | number[] {\n  switch (fmt) {\n    case Encoding.HEX:\n      return Buffer.from(buf).toString('hex');\n    case Encoding.BS58:\n      return bs58.encode(Buffer.from(buf));\n    case Encoding.ARRAY:\n      return [...buf];\n    default:\n      throw BafError.UnsupportedEncoding(fmt);\n  }\n}\n\nexport function encodeBytes(str: string, fmt: Encoding): Buffer {\n  switch (fmt) {\n    case Encoding.HEX:\n      return Buffer.from(str, 'hex');\n    case Encoding.BS58:\n      return bs58.decode(str);\n    case Encoding.UTF8:\n      return Buffer.from(str, 'utf8');\n    default:\n      throw BafError.UnsupportedEncoding(fmt);\n  }\n}\n","import { BafError } from '@baf-wallet/errors';\nimport { Env } from '@baf-wallet/interfaces';\nimport { utils } from 'near-api-js';\n\nexport enum NearNetworkID {\n  DEVNET = 'testnet',\n  TESTNET = 'testnet',\n  MAINNET = 'mainnet',\n}\n\nexport function stringToNetworkID(str: string): NearNetworkID {\n  switch (str) {\n    case NearNetworkID.DEVNET:\n      return NearNetworkID.DEVNET;\n    case NearNetworkID.TESTNET:\n      return NearNetworkID.TESTNET;\n    case NearNetworkID.MAINNET:\n      return NearNetworkID.MAINNET;\n    default:\n      throw BafError.UnknownNetworkIdent;\n  }\n}\n\nexport function getNearNetworkID(env: Env): NearNetworkID {\n  switch (env) {\n    case Env.DEV:\n      return NearNetworkID.DEVNET;\n    case Env.TEST:\n      return NearNetworkID.TESTNET;\n    case Env.PROD:\n      return NearNetworkID.MAINNET;\n    default:\n      return NearNetworkID.DEVNET;\n  }\n}\n\nexport function nearToYoctoNear(amount: number): string {\n  const amountYoctoNearBN = utils.format.NEAR_NOMINATION.muln(amount);\n  return amountYoctoNearBN.toString(10);\n}\n","module.exports = require(\"axios\");","export * from './lib/singletons';\n","import { Env } from '@baf-wallet/interfaces';\nimport { config as dotenvConfig } from 'dotenv';\n\nexport function initDotEnv() {\n  if (!process.env.NON_LOCAL) dotenvConfig({ path: './env/.env.test' });\n}\n\nexport const environment = {\n  env: Env.TEST,\n  production: false,\n};\n","import { BafError } from '@baf-wallet/errors';\nimport {\n  PublicKey,\n  SecretKey,\n  KeyPair,\n  SECP256K1_STR,\n  ED25519_STR,\n  secp256k1,\n  secp256k1Marker,\n} from '@baf-wallet/interfaces';\nimport { bufferConverter } from '@baf-wallet/utils';\nimport { ec as EC } from 'elliptic';\nimport * as nacl from 'tweetnacl';\n\nconst ellipticSecp256k1 = new EC('secp256k1');\n\nexport function pkSecpFromXY(x: string, y: string): PublicKey<secp256k1> {\n  const key = ellipticSecp256k1.keyFromPublic({ x, y }, 'hex');\n  return bufferConverter.pkToUnified(\n    Buffer.from(key.getPublic('array')),\n    secp256k1Marker\n  );\n}\n\nexport function keyPairFromSk<Curve>(sk: SecretKey<Curve>): KeyPair<Curve> {\n  const pk = pkFromSk(sk);\n  return {\n    curve: sk.curve,\n    pk,\n    sk,\n  };\n}\n\nexport function pkFromSk<Curve>(sk: SecretKey<Curve>): PublicKey<Curve> {\n  switch (sk.curve.toString()) {\n    case SECP256K1_STR: {\n      const data = Buffer.from(\n        ellipticSecp256k1.keyFromPrivate(sk.data).getPublic(false, 'hex'),\n        'hex'\n      );\n\n      return bufferConverter.pkToUnified(data, sk.curve);\n    }\n    case ED25519_STR: {\n      const data = Buffer.from(\n        nacl.sign.keyPair.fromSecretKey(new Uint8Array(sk.data)).publicKey\n      );\n\n      return bufferConverter.pkToUnified(data, sk.curve);\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(sk.curve.toString());\n  }\n}\n\nexport function skFromSeed<Curve>(\n  seed: Uint8Array,\n  curveMarker: Curve\n): SecretKey<Curve> {\n  switch (curveMarker.toString()) {\n    case SECP256K1_STR: {\n      const entropy = nacl.hash(seed);\n      const ellipticSk = ellipticSecp256k1\n        .genKeyPair({ entropy })\n        .getPrivate('hex');\n\n      const data = Buffer.from(ellipticSk, 'hex');\n      return bufferConverter.skToUnified(data, curveMarker);\n    }\n    case ED25519_STR: {\n      const data = Buffer.from(\n        nacl.sign.keyPair.fromSeed(new Uint8Array(Buffer.from(seed))).secretKey\n      );\n\n      return bufferConverter.pkToUnified(data, curveMarker);\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(curveMarker.toString());\n  }\n}\n\nexport function skFromRng<Curve>(curveMarker: Curve): SecretKey<Curve> {\n  switch (curveMarker.toString()) {\n    case ED25519_STR: {\n      const data = Buffer.from(nacl.sign.keyPair().secretKey);\n      return bufferConverter.skToUnified(data, curveMarker);\n    }\n    case SECP256K1_STR: {\n      const data = Buffer.from(\n        ellipticSecp256k1.genKeyPair().getPrivate('hex'),\n        'hex'\n      );\n      return bufferConverter.pkToUnified(data, curveMarker);\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(curveMarker.toString());\n  }\n}\n","import {\n  SecretKey,\n  PublicKey,\n  ED25519_STR,\n  SECP256K1_STR,\n  Encoding,\n} from '@baf-wallet/interfaces';\nimport { keccak256, sha256 } from './hash';\nimport { ec as EC } from 'elliptic';\nimport * as nacl from 'tweetnacl';\nimport { encodeBytes } from '@baf-wallet/utils';\nimport { BafError } from '@baf-wallet/errors';\n\nconst ellipticSecp256k1 = new EC('secp256k1');\n\nexport function verifySignature<Curve>(\n  pk: PublicKey<Curve>,\n  msg: Buffer | string,\n  signedMsg: Buffer,\n  hashFn: (buf: Buffer) => Buffer = keccak256\n): boolean {\n  const msgFormat =\n    typeof msg === 'string' ? encodeBytes(msg, Encoding.UTF8) : msg;\n  switch (pk.curve.toString()) {\n    case SECP256K1_STR: {\n      const msgHash = hashFn(msgFormat);\n      let validSig = ellipticSecp256k1.verify(msgHash, signedMsg, pk.data);\n      return validSig;\n    }\n    case ED25519_STR: {\n      const msgHash = hashFn(msgFormat);\n      return nacl.sign.detached.verify(\n        new Uint8Array(msgHash),\n        new Uint8Array(signedMsg),\n        new Uint8Array(pk.data)\n      );\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(pk.curve.toString());\n  }\n}\n\nexport function signMsg<Curve>(\n  sk: SecretKey<Curve>,\n  msg: Buffer | string,\n  GlobalContractFormat = false,\n  hashFn: (buf: Buffer) => Buffer = keccak256\n): Buffer {\n  const msgFormat =\n    typeof msg === 'string' ? encodeBytes(msg, Encoding.UTF8) : msg;\n  switch (sk.curve.toString()) {\n    case SECP256K1_STR: {\n      const msgHash = hashFn(msgFormat);\n      const ellipticSig = ellipticSecp256k1.sign(msgHash, sk.data, 'hex', {\n        canonical: true,\n      });\n      return GlobalContractFormat\n        ? encodeSecpSigRustContract(ellipticSig)\n        : Buffer.from(ellipticSig.toDER('hex'), 'hex');\n    }\n    case ED25519_STR: {\n      const msgHash = hashFn(msgFormat);\n      return Buffer.from(\n        nacl.sign.detached(new Uint8Array(msgHash), new Uint8Array(sk.data))\n      );\n    }\n    default:\n      throw BafError.UnsupportedKeyCurve(sk.curve.toString());\n  }\n}\n\nexport function encodeSecpSigRustContract(sig: EC.Signature): Buffer {\n  return Buffer.from(\n    `${sig.r.toString('hex', 64)}${sig.s.toString('hex', 64)}`,\n    'hex'\n  );\n}\n","export type Pair<T, U> = {\n  fst: T;\n  snd: U;\n};\n\nexport const getEnumValues = (enumObj: any) =>\n  Object.keys(enumObj).map((key) => enumObj[key]);\n\nexport const arrayToObject = (array: { key: string; val: any }[]): any => {\n  return array.reduce((prev, v) => {\n    prev[v.key] = v.val;\n    return prev;\n  }, {});\n};\n\nexport type ThenArg<T> = T extends PromiseLike<infer U> ? U : T;\n","import { Env, TokenInfo } from '@baf-wallet/interfaces';\nimport { Chain, ChainConstants } from '@baf-wallet/interfaces';\nimport { getTokenInfo } from '@baf-wallet/chain-info';\nimport thunky from 'thunky/promise';\nimport { arrayToObject } from '@baf-wallet/utils';\nimport { Account } from 'near-api-js';\nimport {\n  getContract,\n  initContract,\n  NearInitContractParams,\n  NEP141Contract,\n} from './contract';\nimport { NearState } from './near';\n\nconst bridgeContractsProd = [\n  '6b175474e89094c44da98b954eedeac495271d0f.factory.bridge.near',\n  'dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near',\n  '1f9840a85d5af5bf1d1762f925bdaddc4201f984.factory.bridge.near',\n  '514910771af9ca656af840dff83e8264ecf986ca.factory.bridge.near',\n  'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near',\n  '2260fac5e5542a773aa44fbcfedf7c193bc2c599.factory.bridge.near',\n  '7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9.factory.bridge.near',\n  'a0b73e1ff0b80914ab6fe0444e65848c4c34450b.factory.bridge.near',\n  '50d1c9771902476076ecfc8b2a83ad6b9355a4c9.factory.bridge.near',\n  '4fabb145d64652a948d72533023f6e7a623c7c53.factory.bridge.near',\n  '6f259637dcd74c767781e37bc6133cd6a68aa161.factory.bridge.near',\n  '6b3595068778dd592e39a122f4f5a5cf09c90fe2.factory.bridge.near',\n  'c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f.factory.bridge.near',\n  'c944e90c64b2c07662a292be6244bdf05cda44a7.factory.bridge.near',\n  '9f8f72aa9304c8b593d555f12ef6589cc3a579a2.factory.bridge.near',\n  '0bc529c00c6401aef6d220be8c6ea1667f6ad93e.factory.bridge.near',\n  'c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.factory.bridge.near',\n  '0316eb71485b0ab14103307bf65a021042c6d380.factory.bridge.near',\n  '111111111117dc0aa78b770fa6a738034120c302.factory.bridge.near',\n];\n\nexport const getNearSupportedContractTokens = (networkId: string) => {\n  switch (networkId) {\n    case 'mainnet':\n      return ['berryclub.ek.near', 'wrap.near', ...bridgeContractsProd];\n    case 'testnet':\n    default:\n      return ['ft.levtester.testnet', 'wrap.testnet'];\n  }\n};\n\nexport async function getChainConstants(\n  nearState: NearState\n): Promise<ChainConstants> {\n  const tokenContracts = getNearSupportedContractTokens(nearState.networkID);\n  const ft_metadatas = await Promise.all(\n    tokenContracts.map((contractID) =>\n      getContract<NEP141Contract, NearInitContractParams>(nearState, contractID)\n        .init({\n          viewMethods: ['ft_metadata'],\n          changeMethods: [],\n        })\n        .then((contract) => contract.ft_metadata())\n    )\n  );\n  const tokensContractMapping = tokenContracts.map((tokenContract, i) => {\n    return {\n      key: tokenContract,\n      val: async (): Promise<TokenInfo> => {\n        return {\n          ...ft_metadatas[i],\n          contractAddress: tokenContract,\n          chain: Chain.NEAR,\n          type: 'COIN',\n        };\n      },\n    };\n  });\n  const tokens = tokenContracts.map((tokenContract, i) => {\n    return {\n      key: ft_metadatas[i].symbol,\n      val: async (): Promise<TokenInfo> => {\n        return {\n          ...ft_metadatas[i],\n          contractAddress: tokenContract,\n          chain: Chain.NEAR,\n          type: 'COIN',\n        };\n      },\n    };\n  });\n  return {\n    nativeTokenInfo: thunky(() => getTokenInfo(Chain.NEAR)),\n    tokens: {\n      ...arrayToObject(tokens),\n      ...arrayToObject(tokensContractMapping),\n    },\n    supportedContractTokenContracts: tokenContracts,\n  };\n}\n","module.exports = require(\"elliptic\");","export * from './lib/near';\nexport * from './lib/utils';\nexport * from './lib/constants';\nexport * from './lib/rpc';\n","import {\n  Body,\n  Controller,\n  Get,\n  Path,\n  Post,\n  Query,\n  Route,\n  SuccessResponse,\n} from 'tsoa';\n\nimport {\n  createNearAccount,\n  // createNearAccount,\n  getAccountInfoFromSecpPK,\n  getAccountNonce,\n  NearAccountInfo,\n} from '../service/near';\nimport {\n  ed25519Marker,\n  Encoding,\n  PublicKey,\n  secp256k1Marker,\n} from '@baf-wallet/interfaces';\nimport { getTorusPublicAddress } from '@baf-wallet/torus';\nimport { hexString } from './common';\nimport { pkFromString } from '@baf-wallet/crypto';\n\ninterface CreateNearAccountParams {\n  userID: string;\n  nonce: hexString;\n  secpSigHex: hexString;\n  secpSig_s: hexString;\n  edPubkey: hexString;\n  edSigHex: hexString;\n  accountID: string;\n}\n\n@Route('near')\nexport class NearController extends Controller {\n  @SuccessResponse('204')\n  @Post('account')\n  public async createNearAccount(\n    @Body() requestBody: CreateNearAccountParams\n  ): Promise<void> {\n    const secpPubkey = await getTorusPublicAddress(\n      requestBody.userID,\n      'discord'\n    );\n\n    await createNearAccount(\n      secpPubkey,\n      pkFromString(requestBody.edPubkey, ed25519Marker, Encoding.HEX),\n      requestBody.userID,\n      requestBody.nonce,\n      requestBody.secpSigHex,\n      requestBody.secpSig_s,\n      requestBody.edSigHex,\n      requestBody.accountID\n    );\n  }\n\n  @SuccessResponse('200')\n  @Get('account/{secpPubkeyB58}/nonce')\n  public async getAccountNonce(@Path() secpPubkeyB58: string): Promise<string> {\n    const pk = pkFromString(secpPubkeyB58, secp256k1Marker, Encoding.BS58);\n    return await getAccountNonce(pk);\n  }\n\n  @SuccessResponse('200')\n  @Get('account/{secpPubkeyB58}/id')\n  public async getAccountInfo(\n    @Path() secpPubkeyB58: string\n  ): Promise<NearAccountInfo> {\n    const pk = pkFromString(secpPubkeyB58, secp256k1Marker, Encoding.BS58);\n    return await getAccountInfoFromSecpPK(pk);\n  }\n}\n","import {\n  ed25519,\n  Encoding,\n  PublicKey,\n  secp256k1,\n} from '@baf-wallet/interfaces';\nimport {\n  getGlobalContract,\n  setGlobalContract,\n} from '@baf-wallet/global-contract';\nimport { createUserVerifyMessage, encodeBytes } from '@baf-wallet/utils';\nimport { verifySignature } from '@baf-wallet/crypto';\nimport { BafError } from '@baf-wallet/errors';\nimport { getNearChain } from '@baf-wallet/global-state';\n\nexport interface NearAccountInfo {\n  near_id: string | null;\n}\n\n// Check the found public key verifies the signature produced by (nonce + userId)\nexport async function createNearAccount(\n  secpPK: PublicKey<secp256k1>,\n  edPK: PublicKey<ed25519>,\n  userId: string,\n  nonce: string,\n  secpSig: string,\n  rustEncodedSecpSig: string,\n  edSig: string,\n  accountID: string\n) {\n  const msg = createUserVerifyMessage(userId, nonce);\n  if (!verifySignature(secpPK, msg, encodeBytes(secpSig, Encoding.HEX))) {\n    throw BafError.InvalidSignature(secpPK);\n  }\n  if (!verifySignature(edPK, msg, encodeBytes(edSig, Encoding.HEX))) {\n    throw BafError.InvalidSignature(edPK);\n  }\n\n  const near = await getNearChain();\n\n  const nearAccount = near.accounts;\n  await nearAccount.create({\n    accountID,\n    newAccountPk: edPK,\n  });\n\n  const CommunityContract = await getGlobalContract();\n  await CommunityContract.set_account_info({\n    secp_pk: secpPK.format(Encoding.ARRAY) as number[],\n    user_name: userId,\n    secp_sig_s: [...encodeBytes(rustEncodedSecpSig, Encoding.HEX)],\n    new_account_id: accountID,\n  });\n}\n\nexport async function getAccountNonce(\n  pk: PublicKey<secp256k1>\n): Promise<string> {\n  return await getGlobalContract().get_account_nonce({\n    secp_pk: pk.format(Encoding.ARRAY) as number[],\n  });\n}\n\nexport async function getAccountInfoFromSecpPK(\n  pk: PublicKey<secp256k1>\n): Promise<NearAccountInfo> {\n  return {\n    near_id: await getGlobalContract().getAccountId(pk),\n  };\n}\n","module.exports = require(\"body-parser\");","module.exports = require(\"@tsoa/runtime\");","module.exports = require(\"bs58\");","module.exports = require(\"near-api-js/lib/account_creator\");","module.exports = require(\"near-api-js/lib/key_stores\");","module.exports = require(\"@toruslabs/torus.js\");","export enum Env {\n  DEV,\n  TEST,\n  PROD,\n}\n","import { PublicKey, SecretKey, KeyPair, secp256k1, ed25519 } from './crypto';\nimport { Pair } from '@baf-wallet/utils';\nimport { Account as NearAccount, Contract } from 'near-api-js';\nimport { GenericTxAction, GenericTxParams } from './tx';\nimport { Env } from './configs';\nimport { TokenInfo } from '..';\n\nexport enum Chain {\n  NEAR = 'near',\n}\n\n// Or the type with all the supported chain account types\nexport type ChainAccount = NearAccount;\n\nexport type Balance = string;\n\nexport interface ChainBalance {\n  chain: Chain;\n  balance: Balance;\n}\n\nexport interface CommonInitParams {\n  supportedContractTokens: string[];\n}\n\nexport type ExplorerLink = string;\n\n/**\n * It is encouraged to store mappings from both token symbols to token infos and from\n * token contract addresses to infos\n */\nexport interface ContractTokensConstant {\n  [tokenSymbolOrAddress: string]: () => Promise<TokenInfo>;\n}\nexport interface ChainConstants {\n  nativeTokenInfo: () => Promise<TokenInfo>;\n  tokens: ContractTokensConstant;\n  supportedContractTokenContracts: string[];\n}\n\nexport interface AccountsInterface<Account, LookupParams, CreateParams> {\n  lookup: (params: LookupParams) => Promise<Account>;\n  create: (params: CreateParams) => Promise<Account>;\n  masterAccount: Account;\n  getGenericMasterAccount: () => GenericAccount;\n  associatedKeys: <T>(account: Account) => Promise<PublicKey<T>[]>;\n}\n\nexport type AccountContractTokenBalFn = (\n  contractAddress: string\n) => Promise<Balance>;\n\nexport interface GenericAccount {\n  getBalance: () => Promise<Balance>;\n  getContractTokenBalance: AccountContractTokenBalFn;\n}\n\n// bare minimum interface representing direct RPC methods to the chain\n// chains are expected to extend this with their own functions and/or values\nexport interface RpcInterface<Tx, SignedTx, SendOpts, SendResult> {\n  endpoint: (network?: string) => string;\n}\n\n// minimum interface representing all transaction-related operations\n// chains are expected to extend this with their own functions and/or values\nexport interface TxInterface<\n  Tx,\n  BuildTxParams,\n  SignedTx,\n  SignOpts,\n  SendOpts,\n  SendResult\n> {\n  build: (params: BuildTxParams) => Promise<Tx>;\n  sign: <Curve>(\n    tx: Tx,\n    keyPair: KeyPair<Curve>,\n    opts?: SignOpts\n  ) => Promise<SignedTx>;\n  send: (\n    tx: Tx | SignedTx,\n    opts?: SendOpts\n  ) => Promise<Pair<SendResult, ExplorerLink>>;\n  buildParamsFromGenericTx: (\n    params: GenericTxParams,\n    senderPkEd: PublicKey<ed25519>,\n    recipientPk?: PublicKey<secp256k1> | null\n  ) => Promise<BuildTxParams>;\n  extractGenericActionsFromTx: (params: BuildTxParams) => GenericTxAction[];\n}\n\nexport interface ContractInterface<Contract, ContractInitParams> {\n  init: (params: ContractInitParams) => Promise<Contract>;\n}\n\n// utility for going to/from key BAF Wallet unified types\n// each instance expected to be specific to a particular sdk so that\n// we aren't ever locked into using BAF types and reimplementing wheelsA\n// chains are expected to extend this with their own functions and/or values\nexport interface Converter<PK, SK, KP> {\n  skFromUnified: <Curve>(unifiedSk: SecretKey<Curve>) => SK;\n  skToUnified: <Curve>(sk: SK, curveMarker: Curve) => PublicKey<Curve>;\n  pkFromUnified: <Curve>(unifiedPk: PublicKey<Curve>) => PK;\n  pkToUnified: <Curve>(pk: PK, curveMarker: Curve) => SecretKey<Curve>;\n  keyPairFromUnified: <Curve>(unifiedKeyPair: KeyPair<Curve>) => KP;\n  keyPairToUnified: <Curve>(\n    unifiedKeyPair: KP,\n    curveMaker: Curve\n  ) => KeyPair<Curve>;\n  // add more methods for converting shit as necessary\n}\n","import { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\nimport { Chain } from '..';\n@jsonObject\nexport class SocialMediaInfo {\n  @jsonMember(String)\n  public name: string; // platform\n  @jsonMember(String)\n  public url: string;\n  @jsonMember(String)\n  public handle: string;\n}\n\n// The structure associated with the token info's found on https://github.com/bafnetwork/assets\n@jsonObject\nexport class TokenInfoAssets {\n  @jsonMember(String)\n  public name: string;\n  @jsonMember(String)\n  public website?: string;\n  @jsonMember(String)\n  public source_code?: string;\n  @jsonMember(String)\n  public white_paper?: string;\n  @jsonMember(String)\n  public description?: string;\n  @jsonArrayMember(SocialMediaInfo)\n  public socials?: SocialMediaInfo[];\n  @jsonMember(String)\n  public explorer?: string;\n  @jsonMember(String)\n  public symbol: string;\n  @jsonMember(String)\n  public type: 'COIN' | 'NFT';\n  @jsonMember(Number)\n  public decimals: number;\n  @jsonMember(String)\n  public status?: 'active' | 'abandoned';\n  @jsonArrayMember(String)\n  public tags?: string[];\n}\n\nexport interface TokenInfo extends TokenInfoAssets {\n  chain: Chain;\n  contractAddress: string;\n}\n","import { SupportedCurve, KeyPair } from './crypto';\n\nexport enum KeySourceMethod {\n  TORUS,\n  LOCAL_STORAGE,\n  // e.g. file, ledger, brain, etc, as they are implemented\n}\n\n// `KeyID` is a type that represents the type used to \"look up\" a key\n// in theory this could be the public key itself, but some source mechanisms\n// may offer different ways of doing so, for instance the key for use in localStorage.setItem\n// a file path, or a derived account number for a keypair stored on a ledger nano\nexport interface KeySource<KeyID> {\n  method: KeySourceMethod;\n  getKeyPair: <Curve>(\n    keyID: KeyID,\n    curveMarker: Curve\n  ) => Promise<KeyPair<Curve> | null>;\n\n  // these methods are for the off-chance that you don't know which curve a particular key-pair is on\n  // to use this, you'd typically call this and then case on the returned value\n  // for the vast majority of cases there will be only one curve used by a particular key source mechansim\n  // so these method aren't required.\n  // implementors are expected to implement either all of these methods or none of them.\n  getKeyCurve?: (keyID: KeyID) => Promise<SupportedCurve>;\n  getKeyPairUnknownCurve?: (keyID: KeyID) => Promise<KeyPair<SupportedCurve>>;\n}\n\n// then every keySource implementation should provide this function\nexport type KeySourceInitFn<KeyID, InitParams> = (\n  params: InitParams\n) => Promise<KeySource<KeyID>>;\n\nexport type KeySourceInferKeyID<T> = T extends KeySource<infer KeyID>\n  ? KeyID\n  : never;\nexport type KeySourceInitFnInferInitParams<T> = T extends KeySourceInitFn<\n  infer _,\n  infer InitParams\n>\n  ? InitParams\n  : never;\n","import { Buffer } from 'buffer';\n\nexport type secp256k1 = {\n  toString: () => 'secp256k1';\n};\n\nexport type ed25519 = {\n  toString: () => 'ed25519';\n};\n\nexport const ED25519_STR = 'ed25519';\nexport const SECP256K1_STR = 'secp256k1';\n\nexport const secp256k1Marker: secp256k1 = { toString: () => SECP256K1_STR };\nexport const ed25519Marker: ed25519 = { toString: () => ED25519_STR };\n\nexport type SupportedCurve = secp256k1 | ed25519;\n\nexport enum Encoding {\n  BS58,\n  HEX,\n  UTF8,\n  ARRAY,\n}\n\nexport interface PublicKey<Curve> {\n  data: Buffer;\n  curve: Curve;\n  format: (fmt: Encoding) => string | number[];\n}\n\nexport interface SecretKey<Curve> {\n  data: Buffer;\n  curve: Curve;\n  format: (fmt: Encoding) => string | number[];\n}\n\nexport interface KeyPair<Curve> {\n  curve: Curve;\n  sk: SecretKey<Curve>;\n  pk: PublicKey<Curve>;\n}\n/**\n * A hex encoded string for the signature where sig.s is concated with sig.r\n */\nexport type RustEncodedSecpSig = number[];\n","import { ed25519, PublicKey, secp256k1 } from './crypto';\nimport { PLATFORM } from './platforms';\n\nexport enum GenericTxSupportedActions {\n  TRANSFER = 'transfer',\n  TRANSFER_CONTRACT_TOKEN = 'transfer contract token',\n  TRANSFER_NFT = 'transfer nft',\n  CONTRACT_CALL = 'contract call',\n}\n\n/**\n * Either the recipientUserId or recipientAddress has to be provided\n */\nexport interface GenericTxParams {\n  recipientAddress?: string;\n  recipientUserId?: string;\n  oauthProvider?: PLATFORM;\n  actions: GenericTxAction[];\n}\n\ninterface GenericTxActionBase {\n  type: GenericTxSupportedActions;\n}\n\nexport interface GenericTxActionTransfer extends GenericTxActionBase {\n  type: GenericTxSupportedActions.TRANSFER;\n  // Amount is the quantity of the minimal sendable unit for a currency\n  amount: string;\n}\n\nexport interface GenericTxActionContractCall extends GenericTxActionBase {\n  type: GenericTxSupportedActions.CONTRACT_CALL;\n  functionName: string;\n  functionArgs: any;\n  // a number in string form\n  gasFee?: string;\n  // a number in string form\n  deposit?: string;\n}\n\n// An NFT connotes an ERC721 NFT, NEP 4 NFT, etc\nexport interface GenericTxActionTransferNFT extends GenericTxActionBase {\n  type: GenericTxSupportedActions.TRANSFER_NFT;\n  // The token's id\n  tokenId: string;\n  // Contract Address or Account ID\n  contractAddress: string;\n  // Amount is the number of NFTs to send if the contract support semi-fungible NFTs,\n  // the amount should default to 1\n  amount?: string;\n  // An optional string with which to associate a transfer. Some chains support this as a feature\n  memo?: string;\n  // An optional string which is used with approval management standards which some chains have\n  // like Near\n  approvalId?: string;\n}\n// A contract token connotes an ERC21 token, SPL token,  NEP 141 token etc\nexport interface GenericTxActionTransferContractToken\n  extends GenericTxActionBase {\n  type: GenericTxSupportedActions.TRANSFER_CONTRACT_TOKEN;\n  // Contract Address or Account ID\n  contractAddress: string;\n  // Amount is the quantity of the minimal sendable unit for a currency\n  amount: string;\n  // An optional string with which to associate a transfer. Some chains support this as a feature\n  memo?: string;\n}\n\n// To be or'd with whatever other actions we use\nexport type GenericTxAction =\n  | GenericTxActionTransfer\n  | GenericTxActionTransferContractToken\n  | GenericTxActionTransferNFT\n  | GenericTxActionContractCall;\n\nexport enum SupportedTransferTypes {\n  NativeToken = 'Native Token',\n  ContractToken = 'Contract Token',\n}\n","export * from './hash';\nexport * from './index';\nexport * from './keys';\nexport * from './sign';\nexport * from './utils';\n","export * from './keys';\nexport * from './hash';\nexport * from './sign';\n","import {\n  Chain,\n  PublicKey,\n  ed25519,\n  secp256k1,\n  Encoding,\n} from '@baf-wallet/interfaces';\n\nexport namespace BafError {\n  export const UninitChain = (chain: Chain) =>\n    emitError(`You must initialize your account on ${chain} first.`);\n  export const InvalidSignature = (pk: PublicKey<ed25519 | secp256k1>) =>\n    emitError(\n      `An invalid signature has been provided for ${pk.format(Encoding.HEX)}`\n    );\n  export const Unimplemented = () => emitError('Unimplemented');\n  export const InvalidTransactionApproveRedirect = () =>\n    emitError(\n      \"The transaction must be either in the url or passed in through the component's state\"\n    );\n  export const InvalidPackedKey = () =>\n    emitError('The key in storage has an invalid format');\n  export const UnsupportedKeyCurve = (supportedCurve: string) =>\n    emitError(`Only ${supportedCurve} keys are supported`);\n  export const BlockedByCors = () => emitError('Not allowed by CORS policy');\n  export const UninitGlobalContract = () =>\n    emitError(\n      'Global Contract is not initialized yet, please call setGlobalContract'\n    );\n  export const UnintCommunityContract = () =>\n    emitError(\n      'Community Contract is not initialized yet, please call setCommunityContract'\n    );\n  export const UnsupportedToken = (tokenName: string) =>\n    emitError(`Unsupported token ${tokenName}`);\n  export const UnsupportedChain = (chainName: string) =>\n    emitError(`Unsupported blockchain ${chainName}`);\n  export const MissingInitBalance = (chain: Chain) =>\n    emitError(\n      `An initial balance must be specified when initializing an account on ${chain}`\n    );\n  export const MissingKeyPair = () => {\n    emitError('A key path or key pair must be provided');\n  };\n  export const UnknownNetworkIdent = (identifier: string) =>\n    emitError(`Unknown network identifier ${identifier}`);\n  export const InvalidChainTokenListJSON = (err: any) =>\n    emitError(\n      `Received invalid tokenlist.json: ${err}. See \\`ChainInfo\\` in chain-info/src/lib/chain-info.ts for more information`\n    );\n  export const InvalidChainInfoJSON = (err: any) =>\n    emitError(\n      `Received invalid info.json: ${err}. See \\`ChainInfo\\` in chain-info/src/lib/chain-info.ts for more information`\n    );\n  export const UnsupportedEncoding = (fmt: any) =>\n    emitError(`Encoding for format ${fmt} is unsupported`);\n  export const GenericTxRequiresOauthInfo = () =>\n    emitError(\n      `The generic transaction requires the recipient user id, its readable form, and the oauth provider`\n    );\n  export const SecpPKNotAssociatedWithAccount = (chain: Chain) =>\n    emitError(\n      `The provided public key is not associated with an account on ${chain}`\n    );\n  export const NonuniformTxActionRecipients = (chain: Chain) =>\n    emitError(`${chain} only supports one recipient for a set of Tx Actions`);\n  export const MissingContractAddress = () =>\n    emitError(`The contract address must be specified`);\n  export const InvalidTokenContractAddress = (addr: string) =>\n    emitError(`Address ${addr} does not exist or is not a token contract`);\n  export const InvalidContractAddress = (addr: string) =>\n    emitError(`Address ${addr} does not exist or is not a contract`);\n}\n\n// A wrapper function to emit an error, this would allow us to do things such as easier Sentry logging\nfunction emitError(errStr: string) {\n  return new Error(errStr);\n}\n","export * from './bytes';\nexport * from './chains';\nexport * from './conversions';\nexport * from './discord';\nexport * from './types';\nexport * from './user-verifier';\nexport * from './serialize';\n","import { Chain } from '@baf-wallet/interfaces';\nimport { getEnumValues } from './types';\nimport { BafError } from '@baf-wallet/errors';\nimport BN from 'bn.js';\n\nexport const strToChain = (chain: string): Chain | null => {\n  return getEnumValues(Chain).includes(chain.toLowerCase())\n    ? (chain as Chain)\n    : null;\n};\n\nexport function formatTokenAmountToIndivisibleUnit(\n  amount: number,\n  decimals: number\n): string {\n  const expStr = `${1}${new Array(decimals).fill('0').join('')}`;\n  const exp = new BN(expStr);\n  console.log(exp.muln(amount), amount);\n  return exp.muln(amount).toString(10);\n}\n","import {\n  Converter,\n  SecretKey,\n  PublicKey,\n  Encoding,\n  KeyPair,\n} from '@baf-wallet/interfaces';\nimport { formatBytes } from './bytes';\nimport { Pair } from './types';\nimport { Buffer } from 'buffer';\n\nexport const bufferConverter: Converter<\n  Buffer,\n  Buffer,\n  Pair<Buffer, Buffer>\n> = {\n  skFromUnified,\n  skToUnified,\n  pkFromUnified,\n  pkToUnified,\n  keyPairFromUnified,\n  keyPairToUnified,\n};\n\nfunction skFromUnified<Curve>(unifiedSk: SecretKey<Curve>): Buffer {\n  return Buffer.from(unifiedSk.data);\n}\n\nfunction skToUnified<Curve>(sk: Buffer, curveMarker: Curve): SecretKey<Curve> {\n  const data = Buffer.from(sk);\n  return {\n    data,\n    curve: curveMarker,\n    format: (fmt: Encoding) => formatBytes(data, fmt),\n  };\n}\n\nfunction pkFromUnified<Curve>(bafPk: PublicKey<Curve>): Buffer {\n  return Buffer.from(bafPk.data);\n}\n\nfunction pkToUnified<Curve>(pk: Buffer, curveMarker: Curve): PublicKey<Curve> {\n  const data = Buffer.from(pk);\n  return {\n    data,\n    curve: curveMarker,\n    format: (fmt: Encoding) => formatBytes(data, fmt),\n  };\n}\n\nfunction keyPairFromUnified<Curve>(\n  unifiedKeyPair: KeyPair<Curve>\n): Pair<Buffer, Buffer> {\n  const { pk, sk } = unifiedKeyPair;\n  return {\n    fst: Buffer.from(sk.data),\n    snd: Buffer.from(pk.data),\n  };\n}\n\nfunction keyPairToUnified<Curve>(\n  keyPair: Pair<Buffer, Buffer>,\n  curveMarker: Curve\n): KeyPair<Curve> {\n  const skBytes = keyPair.fst;\n  const pkBytes = keyPair.snd;\n  return {\n    curve: curveMarker,\n    sk: skToUnified(skBytes, curveMarker),\n    pk: pkToUnified(pkBytes, curveMarker),\n  };\n}\n","/**\n *\n * @param recipient the snowflake ID recieved by the discord bot. Ex, <@86890631690977280>\n * @returns the snowflake ID, ex 86890631690977280\n */\nexport const parseDiscordRecipient = (recipient: string): string | null => {\n  try {\n    const recipientParsed = recipient.split('<@!')[1].split('>')[0];\n    return recipientParsed;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const createDiscordErrMsg = (err: any): string => {\n  return `🚧 an error has occurred 🚧:\n        \\n\\`${err}\\`\n        \\nPlease create an issue at https://github.com/bafnetwork/baf-wallet-v2/issues and HODL tight until we fix it.`;\n};\n","export function createUserVerifyMessage(userId: string, nonce: string) {\n  return `${userId}:${nonce}`;\n}\n","export const serializeData = (data: any) => JSON.stringify(data);\n// TODO: add type checking. See https://github.com/bafnetwork/baf-wallet-v2/issues/36\nexport const deserializeData = <T>(uriEncoded: string) =>\n  JSON.parse(uriEncoded) as T;\n","import { Encoding, PublicKey, SecretKey } from '@baf-wallet/interfaces';\nimport { encodeBytes, formatBytes } from '@baf-wallet/utils';\n\nexport function pkToString<Curve>(\n  key: PublicKey<Curve>,\n  keyFormat = Encoding.HEX\n): string {\n  return formatBytes(key.data, keyFormat) as string;\n}\n\nexport function pkFromString<Curve>(\n  key: string,\n  curve: Curve,\n  keyFormat = Encoding.HEX\n): PublicKey<Curve> {\n  const data = encodeBytes(key, keyFormat);\n  return {\n    data,\n    curve,\n    format: (fmt: Encoding) => formatBytes(data, fmt),\n  };\n}\n\nexport function skFromString<Curve>(\n  key: string,\n  curve: Curve,\n  keyFormat = Encoding.HEX\n): SecretKey<Curve> {\n  const data = encodeBytes(key, keyFormat);\n  return {\n    data,\n    curve,\n    format: (fmt: Encoding) => formatBytes(data, fmt),\n  };\n}\n","import { ed25519, Encoding, KeyPair } from '@baf-wallet/interfaces';\nimport {\n  Account,\n  connect,\n  ConnectConfig,\n  KeyPair as NearKeyPair,\n  Near,\n  providers,\n  transactions,\n  utils as NearUtils,\n} from 'near-api-js';\n\nimport { NearBuildTxParams, NearSignTxOpts, nearTx } from './tx';\nimport {\n  initContract,\n  NearInitContractParams,\n  NEP141Contract,\n} from './contract';\nimport {\n  getHelperUrl,\n  getRPCUrl,\n  nearRpc,\n  NearSendOpts,\n  NearSendResult,\n} from './rpc';\nimport {\n  NearAccountID,\n  nearAccounts,\n  NearCreateAccountParams,\n} from './accounts';\nimport { nearConverter } from './convert';\nimport { NearNetworkID } from './utils';\nimport { InMemoryKeyStore } from 'near-api-js/lib/key_stores';\nimport { KeyPairEd25519 as NearKeyPairEd25519 } from 'near-api-js/lib/utils';\nimport { BafError } from '@baf-wallet/errors';\nimport { getContract } from './contract';\nimport { getChainConstants } from './constants';\nimport { ThenArg } from '@baf-wallet/utils';\nimport { stat } from 'node:fs';\n\nexport type { NearAccountID, NearCreateAccountParams } from './accounts';\nexport type {\n  NearTransaction,\n  NearBuildTxParams,\n  NearAction,\n  NearSupportedActionTypes,\n} from './tx';\nexport interface NearState {\n  near: Near;\n  rpcProvider: providers.JsonRpcProvider;\n  networkID: NearNetworkID;\n  nearMasterAccount: Account;\n  getFungibleTokenContract: (contractName: string) => Promise<NEP141Contract>;\n}\n\nexport interface NearInitParams {\n  networkID: NearNetworkID;\n  masterAccountID: NearAccountID;\n  keyPath?: string;\n  keyPair?: KeyPair<ed25519>;\n}\n\nexport const getNearChainInterface = async (params: NearInitParams) => {\n  const state = await init(params);\n  return {\n    accounts: nearAccounts(state),\n    tx: nearTx(state),\n    convert: nearConverter,\n    rpc: nearRpc,\n    getContract,\n    constants: await getChainConstants(state),\n  };\n};\nexport type NearChainInterface = ThenArg<\n  ReturnType<typeof getNearChainInterface>\n>;\n\nasync function init({\n  networkID,\n  masterAccountID,\n  keyPath,\n  keyPair,\n}: NearInitParams): Promise<NearState> {\n  const nodeUrl = getRPCUrl(networkID);\n  const connectConfig = {\n    networkId: networkID,\n    nodeUrl,\n    helperUrl: getHelperUrl(networkID),\n    masterAccount: masterAccountID,\n    keyPath,\n  } as ConnectConfig;\n  if (keyPair) {\n    const keyStore = new InMemoryKeyStore();\n    const nearKp = new NearKeyPairEd25519(\n      keyPair.sk.format(Encoding.BS58) as string\n    );\n    keyStore.setKey(networkID, masterAccountID, nearKp);\n    connectConfig.deps = {\n      keyStore: keyStore,\n    };\n    connectConfig.keyStore = keyStore;\n  } else if (keyPath) {\n    const keyStore = new InMemoryKeyStore();\n    connectConfig.deps = {\n      keyStore: keyStore,\n    };\n  } else {\n    throw BafError.MissingKeyPair();\n  }\n\n  const near = await connect(connectConfig);\n\n  const nearMasterAccount = await near.account(masterAccountID);\n  return {\n    near,\n    networkID,\n    rpcProvider: new providers.JsonRpcProvider(nodeUrl),\n    nearMasterAccount,\n    getFungibleTokenContract: (contractAccountID: string) =>\n      initContract(\n        nearMasterAccount,\n        contractAccountID\n      )({\n        viewMethods: ['ft_balance_of', 'ft_total_supply', 'storage_balance_of'],\n        changeMethods: ['ft_transfer'],\n      }),\n  };\n}\n","import { Account, Contract } from 'near-api-js';\nimport { BafError } from '@baf-wallet/errors';\nimport ContractConfig from '../../config.json';\nimport {\n  Encoding,\n  PublicKey,\n  RustEncodedSecpSig,\n  secp256k1,\n} from '@baf-wallet/interfaces';\nimport { NearAccountID } from '@baf-wallet/near';\nimport { initContract, NearContract } from 'libs/near/src/lib/contract';\n\nexport const GlobalContractConfig = { ...ContractConfig };\n\ninterface GlobalContract extends NearContract {\n  getAccountId: (pk: PublicKey<secp256k1>) => Promise<string>;\n  get_account_info: (args: {\n    secp_pk: number[];\n  }) => Promise<{\n    user_name: string;\n    account_id: string;\n  }>;\n  get_account_nonce: (args: { secp_pk: number[] }) => Promise<string>;\n  set_account_info: (args: {\n    secp_pk: number[];\n    user_name: string;\n    secp_sig_s: RustEncodedSecpSig;\n    new_account_id: NearAccountID;\n  }) => Promise<void>;\n  delete_account_info: (args: {\n    secp_pk: number[];\n    user_name: string;\n    secp_sig_s: RustEncodedSecpSig;\n  }) => Promise<void>;\n  get_community_contract: (args: { server: string }) => Promise<string>;\n  get_community_default_nft_contract: (args: {\n    server: string;\n  }) => Promise<string>;\n  set_community_default_nft_contract: (args: {\n    server: string;\n    nft_contract: string;\n  }) => Promise<void>;\n}\n\nlet globalContract: GlobalContract;\n\nexport async function setGlobalContract(\n  account: Account\n): Promise<GlobalContract> {\n  globalContract = await buildGlobalContract(account);\n  return globalContract;\n}\n\nexport function getGlobalContract(): GlobalContract {\n  if (globalContract) return globalContract;\n  throw BafError.UninitGlobalContract();\n}\n\nasync function buildGlobalContract(account: Account): Promise<GlobalContract> {\n  const contract = await initContract(\n    account,\n    ContractConfig.contractName\n  )<GlobalContract>({\n    viewMethods: [\n      'get_account_info',\n      'get_account_nonce',\n      'get_community_contract',\n      'get_community_default_nft_contract',\n    ],\n    changeMethods: [\n      'set_account_info',\n      'delete_account_info',\n      'set_community_default_nft_contract',\n    ],\n  });\n  return {\n    ...contract,\n    getAccountId: async (pk) =>\n      (\n        await contract.get_account_info({\n          secp_pk: pk.format(Encoding.ARRAY) as number[],\n        })\n      )?.account_id,\n  };\n}\n","export const globalContractConstants = {\n  // :)\n  beneficiaryId: 'lev.near',\n};\n","import axios from 'axios';\nimport { BafError } from '@baf-wallet/errors';\nimport 'reflect-metadata';\nimport { jsonObject, jsonMember, TypedJSON, jsonArrayMember } from 'typedjson';\nimport {\n  Chain,\n  ContractTokensConstant,\n  TokenInfo,\n  TokenInfoAssets,\n} from '@baf-wallet/interfaces';\n\nconst baseRawUrl = 'https://raw.githubusercontent.com/bafnetwork/assets/master';\nconst contentsApiUrl =\n  'https://api.github.com/repos/bafnetwork/assets/contents';\n\n// typed JSON objects for parsing info.json's from trustwallet's assets repo\n// e.g. https://github.com/trustwallet/assets/blob/master/blockchains/bitcoin/info/info.json\n\n// TODO: have some intelligent way to get the rest\nexport type DappUrl =\n  | '0x.org'\n  | '1inch.exchange'\n  | 'aave.com'\n  | 'aavegotchi.com'\n  | 'app.aave.com'\n  | 'app.compound.finance'\n  | 'app.ens.domains'\n  | 'app.paraswap.io'\n  | 'app.pooltogether.com'\n  | 'app.uniswap.org'\n  | 'axieinfinity.com'\n  | 'balancer.finance'\n  | 'bank.spankchain.com'\n  | 'cdp.makerdao'\n  | 'compound.finance'\n  | 'curve.fi'\n  | 'dydx.exhange'\n  | 'ens.domains'\n  | 'info.uniswap.org'\n  | 'instadapp.io'\n  | 'kyber.network'\n  | 'kyber.org'\n  | 'market.decentraland.org'\n  | 'marketplace.axieinfinity.com'\n  | 'opensea.io'\n  | 'pooltogether.com'\n  | 'pooltogether.us'\n  | 'rarible.com'\n  | 'snark.art'\n  | 'uniswap.io'\n  | 'uniswap.exchange'\n  | 'yearn.finance';\n\nexport const getChainFolderPrefix = (chain: Chain): string =>\n  `${baseRawUrl}/blockchains/${chain}`;\n\nconst getNonNativeTokenInfoUrl = (\n  chain: Chain,\n  contractAddress: string\n): string =>\n  `${getChainFolderPrefix(chain)}/assets/${contractAddress}/info.json`;\n\nconst getChainInfoUrl = (chain: Chain): string =>\n  `${getChainFolderPrefix(chain)}/info/info.json`;\n\nconst getNonNativeTokenLogoUrl = (\n  chain: Chain,\n  contractAddress: string\n): string =>\n  `${getChainFolderPrefix(chain)}/assets/${contractAddress}/logo.png`;\n\nconst getChainLogoUrl = (chain: Chain): string =>\n  `${getChainFolderPrefix(chain)}/info/logo.png`;\n\nexport const getTokenLogoUrl = (chain: Chain, contractAddress?: string) =>\n  chain === contractAddress || !contractAddress\n    ? getChainLogoUrl(chain)\n    : getNonNativeTokenLogoUrl(chain, contractAddress);\n\nexport const getDappLogoUrl = (dappUrl: DappUrl): string =>\n  `${baseRawUrl}/dapps/${dappUrl}.png`;\n\nexport async function getContractAddresses(\n  chain: Chain,\n  filterFn?: (contractInfoJSON: any) => boolean\n): Promise<string[]> {\n  const url = `${contentsApiUrl}/blockchains/${chain}/assets`;\n  try {\n    const res = await axios.get(url);\n    const { data } = res;\n\n    if (filterFn) {\n      return data.filter(filterFn).map((infoJSON) => infoJSON.name);\n    }\n\n    return data.map((infoJSON) => infoJSON.name);\n  } catch (err) {\n    console.error(`could not fetch addresses: ${err}`);\n    return null;\n  }\n}\n\nexport async function getTokenInfo(\n  chain: Chain,\n  contractAddress?: string\n): Promise<TokenInfo> {\n  const tokenIsChain = chain === contractAddress || !contractAddress;\n  const url = tokenIsChain\n    ? getChainInfoUrl(chain)\n    : getNonNativeTokenInfoUrl(chain, contractAddress);\n  try {\n    const res = await axios.get(url);\n    const { data } = res;\n\n    // remove binance shill link\n    if (data.research !== undefined) {\n      delete data.research;\n    }\n\n    const serializer = new TypedJSON(TokenInfoAssets);\n    const _tokInfo = serializer.parse(data);\n    return {\n      ..._tokInfo,\n      contractAddress,\n      chain,\n    };\n  } catch (err) {\n    if (err.isAxiosError) {\n      console.error(\n        `Chain not found: only chains in ${baseRawUrl} are supported.`\n      );\n      return null;\n    }\n    throw BafError.InvalidChainInfoJSON(err);\n  }\n}\n\nexport async function getContractTokenInfoFromSymbol(\n  symbol: string,\n  contractTokens: ContractTokensConstant\n): Promise<{ tokenInfo: TokenInfo; contract: string } | null> {\n  const contracts = Object.keys(contractTokens);\n  const tokenProms = contracts.map((contract) => contractTokens[contract]());\n  const tokenInfos = await Promise.all(tokenProms);\n  const ind = tokenInfos.map((tokenInfo) => tokenInfo.symbol).indexOf(symbol);\n  if (ind === -1) return null;\n  return { tokenInfo: tokenInfos[ind], contract: contracts[ind] };\n}\n","/**\n * singletons provides methods to initialize and get the wrapped chain interfaces\n */\nimport { Chain, Env } from '@baf-wallet/interfaces';\nimport { BafError } from '@baf-wallet/errors';\nimport {\n  NearChainInterface,\n  NearInitParams,\n  getNearChainInterface,\n} from '@baf-wallet/near';\n\nlet nearChain: NearChainInterface;\nlet init = false;\n\nexport async function initNearChain(params: NearInitParams, env: Env) {\n  nearChain = await getNearChainInterface(params);\n  init = true;\n}\n\nexport function getNearChain(): NearChainInterface {\n  if (!init) throw BafError.UninitChain(Chain.NEAR);\n  return nearChain;\n}\n","import { Encoding, PublicKey, secp256k1 } from '@baf-wallet/interfaces';\nimport Torus from '@toruslabs/torus.js';\nimport NodeDetailsManager from '@toruslabs/fetch-node-details';\nimport * as fetch from 'node-fetch';\nimport { torusConstants, TORUS_LOGIN_TYPE } from './constants';\nimport { pkSecpFromXY } from '@baf-wallet/crypto';\n\nconst torus = new Torus({\n  metadataHost: 'https://metadata.tor.us',\n  allowHost: 'https://signer.tor.us/api/allow',\n});\nTorus.setAPIKey('torus-default');\n\nexport async function getTorusPublicAddress(\n  userId: string,\n  loginType: TORUS_LOGIN_TYPE\n): Promise<PublicKey<secp256k1>> {\n  assertLoginTypeRegistered(loginType);\n  // Configuration from https://github.com/torusresearch/torus-direct-web-sdk/blob/master/src/login.ts\n  const nodeManager = new NodeDetailsManager({\n    network: torusConstants.network,\n    proxyAddress: torusConstants.proxyAddress,\n  });\n\n  const {\n    torusNodeEndpoints,\n    torusNodePub,\n    torusIndexes,\n  } = await nodeManager.getNodeDetails();\n\n  (global as any).fetch = fetch;\n  const torusPublicKey = await torus.getPublicAddress(\n    torusNodeEndpoints,\n    torusNodePub,\n    {\n      verifier: torusConstants.verifierInfo[loginType].verifier,\n      verifierId: userId,\n    },\n    true\n  );\n\n  return pkSecpFromXY((torusPublicKey as any).X, (torusPublicKey as any).Y);\n}\n\nexport function assertLoginTypeRegistered(\n  loginType: TORUS_LOGIN_TYPE\n): boolean {\n  if (!torusConstants.verifierInfo[loginType])\n    throw `No verifier info exits for login type ${loginType}`;\n  return true;\n}\n","module.exports = require(\"express\");","/* tslint:disable */\n/* eslint-disable */\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\nimport { Controller, ValidationService, FieldErrors, ValidateError, TsoaRoute, HttpStatusCodeLiteral, TsoaResponse } from '@tsoa/runtime';\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\nimport { DiscordController } from './../src/app/controllers/DiscordController';\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\nimport { NearController } from './../src/app/controllers/NearController';\nimport * as express from 'express';\n\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\nconst models: TsoaRoute.Models = {\n    \"RevokeTokenParams\": {\n        \"dataType\": \"refObject\",\n        \"properties\": {\n            \"token\": {\"dataType\":\"string\",\"required\":true},\n        },\n        \"additionalProperties\": false,\n    },\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n    \"hexString\": {\n        \"dataType\": \"refAlias\",\n        \"type\": {\"dataType\":\"string\",\"validators\":{}},\n    },\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n    \"CreateNearAccountParams\": {\n        \"dataType\": \"refObject\",\n        \"properties\": {\n            \"userID\": {\"dataType\":\"string\",\"required\":true},\n            \"nonce\": {\"ref\":\"hexString\",\"required\":true},\n            \"secpSigHex\": {\"ref\":\"hexString\",\"required\":true},\n            \"secpSig_s\": {\"ref\":\"hexString\",\"required\":true},\n            \"edPubkey\": {\"ref\":\"hexString\",\"required\":true},\n            \"edSigHex\": {\"ref\":\"hexString\",\"required\":true},\n            \"accountID\": {\"dataType\":\"string\",\"required\":true},\n        },\n        \"additionalProperties\": false,\n    },\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n    \"NearAccountInfo\": {\n        \"dataType\": \"refObject\",\n        \"properties\": {\n            \"near_id\": {\"dataType\":\"union\",\"subSchemas\":[{\"dataType\":\"string\"},{\"dataType\":\"enum\",\"enums\":[null]}],\"required\":true},\n        },\n        \"additionalProperties\": false,\n    },\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n};\nconst validationService = new ValidationService(models);\n\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\nexport function RegisterRoutes(app: express.Router) {\n    // ###########################################################################################################\n    //  NOTE: If you do not see routes for all of your controllers in this file, then you might not have informed tsoa of where to look\n    //      Please look into the \"controllerPathGlobs\" config option described in the readme: https://github.com/lukeautry/tsoa\n    // ###########################################################################################################\n        app.post('/discord/revoke-token',\n            function DiscordController_revokeToken(request: any, response: any, next: any) {\n            const args = {\n                    accessToken: {\"in\":\"body\",\"name\":\"accessToken\",\"required\":true,\"ref\":\"RevokeTokenParams\"},\n            };\n\n            // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n            let validatedArgs: any[] = [];\n            try {\n                validatedArgs = getValidatedArgs(args, request, response);\n            } catch (err) {\n                return next(err);\n            }\n\n            const controller = new DiscordController();\n\n\n            const promise = controller.revokeToken.apply(controller, validatedArgs as any);\n            promiseHandler(controller, promise, response, undefined, next);\n        });\n        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n        app.post('/near/account',\n            function NearController_createNearAccount(request: any, response: any, next: any) {\n            const args = {\n                    requestBody: {\"in\":\"body\",\"name\":\"requestBody\",\"required\":true,\"ref\":\"CreateNearAccountParams\"},\n            };\n\n            // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n            let validatedArgs: any[] = [];\n            try {\n                validatedArgs = getValidatedArgs(args, request, response);\n            } catch (err) {\n                return next(err);\n            }\n\n            const controller = new NearController();\n\n\n            const promise = controller.createNearAccount.apply(controller, validatedArgs as any);\n            promiseHandler(controller, promise, response, undefined, next);\n        });\n        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n        app.get('/near/account/:secpPubkeyB58/nonce',\n            function NearController_getAccountNonce(request: any, response: any, next: any) {\n            const args = {\n                    secpPubkeyB58: {\"in\":\"path\",\"name\":\"secpPubkeyB58\",\"required\":true,\"dataType\":\"string\"},\n            };\n\n            // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n            let validatedArgs: any[] = [];\n            try {\n                validatedArgs = getValidatedArgs(args, request, response);\n            } catch (err) {\n                return next(err);\n            }\n\n            const controller = new NearController();\n\n\n            const promise = controller.getAccountNonce.apply(controller, validatedArgs as any);\n            promiseHandler(controller, promise, response, undefined, next);\n        });\n        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n        app.get('/near/account/:secpPubkeyB58/id',\n            function NearController_getAccountInfo(request: any, response: any, next: any) {\n            const args = {\n                    secpPubkeyB58: {\"in\":\"path\",\"name\":\"secpPubkeyB58\",\"required\":true,\"dataType\":\"string\"},\n            };\n\n            // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n            let validatedArgs: any[] = [];\n            try {\n                validatedArgs = getValidatedArgs(args, request, response);\n            } catch (err) {\n                return next(err);\n            }\n\n            const controller = new NearController();\n\n\n            const promise = controller.getAccountInfo.apply(controller, validatedArgs as any);\n            promiseHandler(controller, promise, response, undefined, next);\n        });\n        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n    function isController(object: any): object is Controller {\n        return 'getHeaders' in object && 'getStatus' in object && 'setStatus' in object;\n    }\n\n    function promiseHandler(controllerObj: any, promise: any, response: any, successStatus: any, next: any) {\n        return Promise.resolve(promise)\n            .then((data: any) => {\n                let statusCode = successStatus;\n                let headers;\n                if (isController(controllerObj)) {\n                    headers = controllerObj.getHeaders();\n                    statusCode = controllerObj.getStatus() || statusCode;\n                }\n\n                // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n                returnHandler(response, statusCode, data, headers)\n            })\n            .catch((error: any) => next(error));\n    }\n\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n    function returnHandler(response: any, statusCode?: number, data?: any, headers: any = {}) {\n        if (response.headersSent) {\n            return;\n        }\n        Object.keys(headers).forEach((name: string) => {\n            response.set(name, headers[name]);\n        });\n        if (data && typeof data.pipe === 'function' && data.readable && typeof data._read === 'function') {\n            data.pipe(response);\n        } else if (data !== null && data !== undefined) {\n            response.status(statusCode || 200).json(data);\n        } else {\n            response.status(statusCode || 204).end();\n        }\n    }\n\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n    function responder(response: any): TsoaResponse<HttpStatusCodeLiteral, unknown>  {\n        return function(status, data, headers) {\n            returnHandler(response, status, data, headers);\n        };\n    };\n\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n\n    function getValidatedArgs(args: any, request: any, response: any): any[] {\n        const fieldErrors: FieldErrors  = {};\n        const values = Object.keys(args).map((key) => {\n            const name = args[key].name;\n            switch (args[key].in) {\n                case 'request':\n                    return request;\n                case 'query':\n                    return validationService.ValidateParam(args[key], request.query[name], name, fieldErrors, undefined, {\"noImplicitAdditionalProperties\":\"throw-on-extras\"});\n                case 'path':\n                    return validationService.ValidateParam(args[key], request.params[name], name, fieldErrors, undefined, {\"noImplicitAdditionalProperties\":\"throw-on-extras\"});\n                case 'header':\n                    return validationService.ValidateParam(args[key], request.header(name), name, fieldErrors, undefined, {\"noImplicitAdditionalProperties\":\"throw-on-extras\"});\n                case 'body':\n                    return validationService.ValidateParam(args[key], request.body, name, fieldErrors, undefined, {\"noImplicitAdditionalProperties\":\"throw-on-extras\"});\n                case 'body-prop':\n                    return validationService.ValidateParam(args[key], request.body[name], name, fieldErrors, 'body.', {\"noImplicitAdditionalProperties\":\"throw-on-extras\"});\n                case 'formData':\n                    if (args[key].dataType === 'file') {\n                        return validationService.ValidateParam(args[key], request.file, name, fieldErrors, undefined, {\"noImplicitAdditionalProperties\":\"throw-on-extras\"});\n                    } else if (args[key].dataType === 'array' && args[key].array.dataType === 'file') {\n                        return validationService.ValidateParam(args[key], request.files, name, fieldErrors, undefined, {\"noImplicitAdditionalProperties\":\"throw-on-extras\"});\n                    } else {\n                        return validationService.ValidateParam(args[key], request.body[name], name, fieldErrors, undefined, {\"noImplicitAdditionalProperties\":\"throw-on-extras\"});\n                    }\n                case 'res':\n                    return responder(response);\n            }\n        });\n\n        if (Object.keys(fieldErrors).length > 0) {\n            throw new ValidateError(fieldErrors, '');\n        }\n        return values;\n    }\n\n    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n}\n\n// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa\n","import {\n  Body,\n  Controller,\n  Get,\n  Path,\n  Post,\n  Route,\n  SuccessResponse,\n} from 'tsoa';\nimport {\n  discordRevokeAccessToken,\n  DiscordPublicInfo,\n} from '../service/discord';\n\ninterface RevokeTokenParams {\n  token: string;\n}\n\n@Route('discord')\nexport class DiscordController extends Controller {\n  @SuccessResponse('204')\n  @Post('revoke-token')\n  public async revokeToken(\n    @Body() accessToken: RevokeTokenParams\n  ): Promise<void> {\n    await discordRevokeAccessToken(accessToken.token);\n  }\n}\n","import FormData from 'form-data';\nimport axios from 'axios';\nimport { constants } from '../config/constants';\nimport * as discord from 'discord.js';\n\nexport interface DiscordPublicInfo {\n  verifierId: string;\n}\n\nexport async function discordRevokeAccessToken(token: string) {\n  const formData = new FormData();\n  formData.append('token', token);\n  const res = await axios.post(\n    'https://discordapp.com/api/oauth2/token/revoke',\n    formData,\n    {\n      headers: {\n        ...formData.getHeaders(),\n        Authorization: `Basic ${Buffer.from(\n          `${constants.discord.clientId}:${constants.discord.clientSecret}`,\n          'binary'\n        ).toString('base64')}`,\n      },\n    }\n  );\n}\n","module.exports = require(\"form-data\");","module.exports = require(\"js-sha3\");","module.exports = require(\"js-sha256\");","import {\n  KeyPair,\n  TxInterface,\n  PublicKey,\n  secp256k1,\n  ed25519,\n  ExplorerLink,\n  GenericTxParams,\n  GenericTxSupportedActions,\n  GenericTxAction,\n  GenericTxActionTransfer,\n  GenericTxActionTransferContractToken,\n  Chain,\n  GenericTxActionTransferNFT,\n  GenericTxActionContractCall,\n} from '@baf-wallet/interfaces';\nimport { getGlobalContract } from '@baf-wallet/global-contract';\nimport { Pair } from '@baf-wallet/utils';\nimport { sha256 } from '@baf-wallet/crypto';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { transactions, utils } from 'near-api-js';\n\nimport { NearState } from './near';\nimport { NearSendOpts, NearSendResult } from './rpc';\nimport { NearAccountID } from './accounts';\nimport { nearConverter } from './convert';\nimport {\n  Action as NearNativeAction,\n  SignedTransaction,\n  Transaction,\n} from 'near-api-js/lib/transaction';\nimport { BafError } from '@baf-wallet/errors';\n\nexport type NearTxInterface = TxInterface<\n  Transaction,\n  NearBuildTxParams,\n  SignedTransaction,\n  NearSignTxOpts,\n  NearSendOpts,\n  NearSendResult\n>;\nexport type NearSupportedActionTypes = GenericTxSupportedActions;\nexport type NearTransaction = Transaction;\n\nexport type NearAction = GenericTxAction;\nexport interface NearBuildTxParams {\n  actions: NearAction[];\n  senderPk: PublicKey<ed25519>;\n  senderAccountID: NearAccountID;\n  recipientAccountID: NearAccountID;\n}\n\n// eslint-disable-next-line\nexport interface NearSignTxOpts {}\n\nexport function nearTx(innerSdk: NearState): NearTxInterface {\n  return {\n    build: buildNearTx(innerSdk),\n    sign: signNearTx,\n    send: sendNearTx(innerSdk),\n    buildParamsFromGenericTx: buildParamsFromGenericTx(innerSdk),\n    extractGenericActionsFromTx,\n  };\n}\n\nfunction buildNativeAction(\n  receiverId: string,\n  action: NearAction,\n  innerSdk: NearState\n): NearNativeAction[] {\n  const actionType = action.type;\n  switch (actionType) {\n    case GenericTxSupportedActions.TRANSFER:\n      return [\n        transactions.transfer(\n          new BN((action as GenericTxActionTransfer).amount, 10)\n        ),\n      ];\n\n    case GenericTxSupportedActions.TRANSFER_CONTRACT_TOKEN: {\n      const params = action as GenericTxActionTransferContractToken;\n      return [\n        transactions.functionCall(\n          'ft_transfer',\n          {\n            receiver_id: receiverId,\n            amount: params.amount,\n            memo: params.memo ?? null,\n          },\n          // TODO: maximum gas fees per chain: see https://github.com/bafnetwork/baf-wallet-v2/issues/68\n          new BN(10000000000000), // Maximum gas fee\n          new BN(1) // A deposit associated with the ft_transfer action\n        ),\n      ];\n    }\n\n    case GenericTxSupportedActions.TRANSFER_NFT: {\n      const params = action as GenericTxActionTransferNFT;\n      return [\n        transactions.functionCall(\n          'nft_transfer',\n          {\n            receiver_id: receiverId,\n            token_id: params.tokenId,\n            approval_id: params.approvalId ?? null,\n            memo: params.memo ?? null,\n          },\n          // TODO: maximum gas fees per chain: see https://github.com/bafnetwork/baf-wallet-v2/issues/68\n          new BN(10000000000000), // Maximum gas fee\n          new BN(1)\n        ),\n      ];\n    }\n\n    case GenericTxSupportedActions.CONTRACT_CALL: {\n      const params = action as GenericTxActionContractCall;\n      return [\n        transactions.functionCall(\n          params.functionName,\n          params.functionArgs,\n          new BN(10000000000000), // Maximum gas fee\n          new BN(params.deposit || 0)\n        ),\n      ];\n    }\n\n    default:\n      throw `Action of type ${actionType} is unsupported`;\n  }\n}\n\nconst checkAllContractActions = (actions: NearAction[]) => {\n  if (!actions.every(isContractCall)) {\n    return false;\n  }\n  if (actions.length === 0) {\n    return true;\n  }\n\n  const contract = (actions[0] as GenericTxActionTransferContractToken)\n    .contractAddress;\n\n  for (let i = 1; i < actions.length; i++) {\n    if (\n      (actions[i] as GenericTxActionTransferContractToken).contractAddress !==\n      contract\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isContractCall = (action: NearAction) =>\n  action.type === GenericTxSupportedActions.TRANSFER_CONTRACT_TOKEN ||\n  action.type === GenericTxSupportedActions.TRANSFER_NFT;\n\nexport const extractGenericActionsFromTx = (\n  txParams: NearBuildTxParams\n): GenericTxAction[] => {\n  return txParams.actions;\n};\n\nexport const buildParamsFromGenericTx = (innerSdk: NearState) => async (\n  txParams: GenericTxParams,\n  senderPk: PublicKey<ed25519>,\n  recipientPk?: PublicKey<secp256k1>,\n): Promise<NearBuildTxParams> => {\n  let recipientAccountID = txParams.recipientAddress\n    ? txParams.recipientAddress\n    : await getGlobalContract().getAccountId(recipientPk);\n\n  if (!recipientAccountID) {\n    throw BafError.SecpPKNotAssociatedWithAccount(Chain.NEAR);\n  }\n\n  const nearTxParams: NearBuildTxParams = {\n    actions: txParams.actions,\n    senderPk: senderPk,\n    senderAccountID: innerSdk.nearMasterAccount.accountId,\n    recipientAccountID,\n  };\n  return nearTxParams;\n};\n\nexport const buildNearTx = (innerSdk: NearState) => async ({\n  actions,\n  senderPk,\n  senderAccountID,\n  recipientAccountID,\n}: NearBuildTxParams): Promise<Transaction> => {\n  if (actions.some(isContractCall) && !checkAllContractActions(actions)) {\n    throw BafError.NonuniformTxActionRecipients(Chain.NEAR);\n  }\n\n  const nearSenderPk = nearConverter.pkFromUnified(senderPk);\n  const accessKey = await innerSdk.rpcProvider.query(\n    `access_key/${senderAccountID}/${nearSenderPk.toString()}`,\n    ''\n  );\n\n  const nonce = ++accessKey.nonce;\n  const recentBlockHash = utils.serialize.base_decode(accessKey.block_hash);\n  const nativeActions = actions.flatMap((action) =>\n    buildNativeAction(recipientAccountID, action, innerSdk)\n  );\n\n  const transactionRecipient =\n    actions.some(isContractCall) && actions.length > 0\n      ? (actions[0] as GenericTxActionTransferContractToken).contractAddress\n      : recipientAccountID;\n\n  return transactions.createTransaction(\n    senderAccountID,\n    nearSenderPk,\n    transactionRecipient,\n    nonce,\n    nativeActions,\n    recentBlockHash\n  );\n};\n\nexport async function signNearTx<Curve>(\n  tx: transactions.Transaction,\n  keyPair: KeyPair<Curve>,\n  _opts?: NearSignTxOpts\n): Promise<transactions.SignedTransaction> {\n  const nearKeyPair = nearConverter.keyPairFromUnified(keyPair);\n  const serializedTx = utils.serialize.serialize(transactions.SCHEMA, tx);\n  const serializedTxHash = new Uint8Array(sha256(Buffer.from(serializedTx)));\n  const signature = nearKeyPair.sign(serializedTxHash);\n  // const [_, signedTx] = await signTransaction(tx, )\n  return new transactions.SignedTransaction({\n    transaction: tx,\n    signature: new transactions.Signature({\n      keyType: tx.publicKey.keyType,\n      data: signature.signature,\n    }),\n  });\n}\n\nexport const sendNearTx = (innerSdk: NearState) => async (\n  tx: SignedTransaction\n): Promise<Pair<NearSendResult, ExplorerLink>> => {\n  const serialized = tx.encode();\n  const result = await innerSdk.rpcProvider.sendJsonRpc('broadcast_tx_commit', [\n    Buffer.from(serialized).toString('base64'),\n  ]);\n\n  const explorerLink = `https://explorer.${innerSdk.networkID}.near.org/transactions/${result.transaction.hash}`;\n  return {\n    fst: result,\n    snd: explorerLink,\n  };\n};\n","import {\n  AccountsInterface,\n  Balance,\n  Chain,\n  ed25519,\n  ed25519Marker,\n  Encoding,\n  secp256k1,\n} from '@baf-wallet/interfaces';\nimport { Account as NearAccount } from 'near-api-js';\nimport {\n  AccountCreator,\n  UrlAccountCreator,\n  LocalAccountCreator,\n} from 'near-api-js/lib/account_creator';\nimport BN from 'bn.js';\n\nimport { PublicKey } from '@baf-wallet/interfaces';\nimport { NearState } from './near';\nimport { nearConverter } from './convert';\nimport { BafError } from '@baf-wallet/errors';\nimport { pkFromString } from '@baf-wallet/crypto';\n\nexport type NearAccountID = string;\n\nconst NEP141ViewMethods = [\n  'ft_balance_of',\n  'ft_total_supply',\n  'storage_balance_of',\n];\nconst NEP141ChangeMethods = [\n  'ft_transfer',\n  'ft_transfer_call',\n  'storage_deposit',\n];\n\nexport function nearAccounts(\n  nearState: NearState\n): AccountsInterface<NearAccount, NearAccountID, NearCreateAccountParams> {\n  const { near } = nearState;\n  return {\n    lookup: async (accountID: NearAccountID): Promise<NearAccount> =>\n      await near.account(accountID),\n    masterAccount: nearState.nearMasterAccount,\n    getGenericMasterAccount: () => {\n      return {\n        getBalance: async () =>\n          (await nearState.nearMasterAccount.getAccountBalance())\n            .total as Balance,\n        getContractTokenBalance: async (\n          contractName: string\n        ): Promise<string> => {\n          const contract = await nearState.getFungibleTokenContract(\n            contractName\n          );\n          return await (contract as any).ft_balance_of({\n            account_id: nearState.nearMasterAccount.accountId,\n          });\n        },\n      };\n    },\n\n    associatedKeys,\n\n    create: async ({\n      accountID,\n      newAccountPk,\n      initialBalance,\n      method = 'helper',\n    }: NearCreateAccountParams): Promise<NearAccount> => {\n      if (method === 'local' && !initialBalance) {\n        throw BafError.MissingInitBalance(Chain.NEAR);\n      }\n      const masterAccount = await near.account(near.config.masterAccount);\n      const accountCreator: AccountCreator =\n        method === 'helper'\n          ? new UrlAccountCreator(near.connection, near.config.helperUrl)\n          : new LocalAccountCreator(masterAccount, initialBalance);\n\n      await accountCreator.createAccount(\n        accountID,\n        nearConverter.pkFromUnified(newAccountPk)\n      );\n      return await near.account(accountID);\n    },\n  };\n}\n\nexport async function associatedKeys<Curve extends ed25519>(\n  account: NearAccount\n) {\n  const keys = await account.getAccessKeys();\n  const edPkStrs = keys\n    .map((key) => key.public_key as string)\n    .filter((keyStr) => keyStr.includes('ed25519:'))\n    .map((key) => key.split('ed25519:')[1]);\n  return edPkStrs.map((str) =>\n    pkFromString<ed25519>(str, ed25519Marker, Encoding.BS58)\n  );\n}\n\nexport interface NearCreateAccountParams {\n  accountID: NearAccountID;\n  newAccountPk: PublicKey<ed25519 | secp256k1>;\n  initialBalance?: BN;\n  method?: 'helper' | 'local';\n}\n","module.exports = require(\"near-api-js/lib/utils\");","export * from './lib/chain-info';\n","module.exports = require(\"thunky/promise\");","module.exports = require(\"dotenv\");","export * from './constants';\nexport * from './torus';\n","module.exports = require(\"@toruslabs/fetch-node-details\");","module.exports = require(\"node-fetch\");","module.exports = require(\"cors\");","import * as bodyParser from 'body-parser';\nimport express from 'express';\nimport { RegisterRoutes } from '../build/routes';\nimport { constants } from './app/config/constants';\nimport * as cors from 'cors';\nimport { setGlobalContract } from '@baf-wallet/global-contract';\nimport { Chain, Env } from '@baf-wallet/interfaces';\nimport { getNearChain, initNearChain } from '@baf-wallet/global-state';\nimport { BafError } from '@baf-wallet/errors';\n\nconst app = express();\n\nasync function initContracts() {\n  const masterAccount = await getNearChain().accounts.lookup(\n    constants.chainParams[Chain.NEAR].masterAccountID\n  );\n  await setGlobalContract(masterAccount);\n}\n\nasync function init() {\n  await initNearChain(constants.chainParams[Chain.NEAR], constants.env);\n  await initContracts();\n  app.use(\n    bodyParser.urlencoded({\n      extended: true,\n    })\n  );\n  app.use(bodyParser.json());\n  const whitelist = [\n    'http://localhost:8080',\n    'https://baf-wallet-deploy-frontend.vercel.app',\n  ];\n  const corsOptions = {\n    origin: function (origin, callback) {\n      if (whitelist.indexOf(origin) !== -1) {\n        callback(null, true);\n      } else if (\n        // If the env is TEST or DEV, check against the following REGEX string to\n        // allow for frontend Vercel branch deploys to be testable\n        (constants.env === Env.TEST || constants.env === Env.DEV) &&\n        /^https:\\/\\/baf\\-wallet\\-v2\\-git\\-.{1,100}\\-baf\\-wallet\\.vercel\\.app$/.test(\n          origin\n        )\n      ) {\n        callback(null, true);\n      } else {\n        callback(BafError.BlockedByCors());\n      }\n    },\n  };\n  app.use(cors(corsOptions));\n\n  RegisterRoutes(app);\n\n  const port = process.env.PORT || 3333;\n  const server = app.listen(port, () => {\n    console.log(`Listening at http://localhost:${port}/`);\n  });\n  server.on('error', console.error);\n}\ninit();\n","module.exports = require(\"reflect-metadata\");"],"sourceRoot":""}